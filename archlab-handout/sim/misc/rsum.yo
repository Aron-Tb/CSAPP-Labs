                            | # Recursively sum linked list elements
                            | # author: Aron
                            | # Date: 4/5/2023
                            | 
                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp
0x00a: 804800000000000000   |     call main
0x013: 00                   |     halt
                            | 
                            | # Sample linked list
0x018:                      |     .align 8
0x018:                      | ls:
0x018:                      |     ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      |     ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      |     ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
                            | # main
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ls, %rdi
0x052: 805c00000000000000   |     call rsum_list
0x05b: 90                   |     ret
                            | 
0x05c:                      | rsum_list:
0x05c: 6300                 |     xorq %rax, %rax  # set %rax = 0
0x05e: 6277                 |     andq %rdi, %rdi  # test: ls == nullptr
0x060: 738c00000000000000   |     je return
0x069: 50670000000000000000 |     mrmovq (%rdi), %rsi  # val = ls->val
0x073: 50770800000000000000 |     mrmovq 8(%rdi), %rdi # ls = ls->next
0x07d: a06f                 |     pushq %rsi
0x07f: 805c00000000000000   |     call rsum_list
0x088: b06f                 |     popq %rsi
0x08a: 6060                 |     addq %rsi, %rax    
0x08c:                      |     return:
0x08c: 90                   |         ret
0x200:                      |     .pos 0x200
0x200:                      | stack:
